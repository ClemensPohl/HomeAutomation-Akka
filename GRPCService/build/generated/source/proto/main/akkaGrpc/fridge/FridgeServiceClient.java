
// Generated by Akka gRPC. DO NOT EDIT.
package fridge;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcChannel;
import akka.grpc.GrpcClientCloseException;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static fridge.FridgeService.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class FridgeServiceClient extends FridgeServiceClientPowerApi implements FridgeService, AkkaGrpcClient {
  public static final FridgeServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultFridgeServiceClient(akka.grpc.GrpcChannel$.MODULE$.apply(settings, sys), true, sys);
  }

  public static final FridgeServiceClient create(GrpcChannel channel, ClassicActorSystemProvider sys) {
    return new DefaultFridgeServiceClient(channel, false, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultFridgeServiceClient extends FridgeServiceClient {

      private final GrpcChannel channel;
      private final boolean isChannelOwned;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;
      private final MetadataImpl defaultMetadata;

      private DefaultFridgeServiceClient(GrpcChannel channel, boolean isChannelOwned, ClassicActorSystemProvider sys) {
        this.channel = channel;
        this.isChannelOwned = isChannelOwned;
        this.settings = channel.settings();
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.options = NettyClientUtils.callOptions(settings);
        this.defaultMetadata = MetadataImpl.empty();

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

      private DefaultFridgeServiceClient(GrpcChannel channel, boolean isChannelOwned, GrpcClientSettings settings, io.grpc.CallOptions options, Materializer mat, ExecutionContext ec, MetadataImpl defaultMetadata) {
        this.channel = channel;
        this.isChannelOwned = isChannelOwned;
        this.settings = settings;
        this.options = options;
        this.mat = mat;
        this.ec = ec;
        this.defaultMetadata = defaultMetadata;
      }

  
    
      
        private final SingleResponseRequestBuilder<fridge.Fridge.Product, fridge.Fridge.AddProductResponse> addProductRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaUnaryRequestBuilder<>(addProductDescriptor, channel, options, settings, defaultMetadata, ec);
        }
      
    
  
    
      
        private final SingleResponseRequestBuilder<fridge.Fridge.RemoveProductRequest, fridge.Fridge.RemoveProductResponse> removeProductRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaUnaryRequestBuilder<>(removeProductDescriptor, channel, options, settings, defaultMetadata, ec);
        }
      
    
  
    
      
        private final SingleResponseRequestBuilder<fridge.Fridge.Empty, fridge.Fridge.ProductList> listProductsRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaUnaryRequestBuilder<>(listProductsDescriptor, channel, options, settings, defaultMetadata, ec);
        }
      
    
  
    
      
        private final SingleResponseRequestBuilder<fridge.Fridge.Empty, fridge.Fridge.OrderHistoryList> getOrderHistoryRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaUnaryRequestBuilder<>(getOrderHistoryDescriptor, channel, options, settings, defaultMetadata, ec);
        }
      
    
  

      

        /**
         * For access to method metadata use the parameterless version of addProduct
         */
        public java.util.concurrent.CompletionStage<fridge.Fridge.AddProductResponse> addProduct(fridge.Fridge.Product request) {
          return addProduct().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer addProduct(fridge.Fridge.Product) if possible.
         */
        
          
            public SingleResponseRequestBuilder<fridge.Fridge.Product, fridge.Fridge.AddProductResponse> addProduct()
          
        
        {
          return addProductRequestBuilder(channel.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of removeProduct
         */
        public java.util.concurrent.CompletionStage<fridge.Fridge.RemoveProductResponse> removeProduct(fridge.Fridge.RemoveProductRequest request) {
          return removeProduct().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer removeProduct(fridge.Fridge.RemoveProductRequest) if possible.
         */
        
          
            public SingleResponseRequestBuilder<fridge.Fridge.RemoveProductRequest, fridge.Fridge.RemoveProductResponse> removeProduct()
          
        
        {
          return removeProductRequestBuilder(channel.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of listProducts
         */
        public java.util.concurrent.CompletionStage<fridge.Fridge.ProductList> listProducts(fridge.Fridge.Empty request) {
          return listProducts().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer listProducts(fridge.Fridge.Empty) if possible.
         */
        
          
            public SingleResponseRequestBuilder<fridge.Fridge.Empty, fridge.Fridge.ProductList> listProducts()
          
        
        {
          return listProductsRequestBuilder(channel.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of getOrderHistory
         */
        public java.util.concurrent.CompletionStage<fridge.Fridge.OrderHistoryList> getOrderHistory(fridge.Fridge.Empty request) {
          return getOrderHistory().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getOrderHistory(fridge.Fridge.Empty) if possible.
         */
        
          
            public SingleResponseRequestBuilder<fridge.Fridge.Empty, fridge.Fridge.OrderHistoryList> getOrderHistory()
          
        
        {
          return getOrderHistoryRequestBuilder(channel.internalChannel());
        }
      

      
        private static MethodDescriptor<fridge.Fridge.Product, fridge.Fridge.AddProductResponse> addProductDescriptor =
          MethodDescriptor.<fridge.Fridge.Product, fridge.Fridge.AddProductResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("fridge.FridgeService", "AddProduct"))
            .setRequestMarshaller(new ProtoMarshaller<fridge.Fridge.Product>(ProductSerializer))
            .setResponseMarshaller(new ProtoMarshaller<fridge.Fridge.AddProductResponse>(AddProductResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<fridge.Fridge.RemoveProductRequest, fridge.Fridge.RemoveProductResponse> removeProductDescriptor =
          MethodDescriptor.<fridge.Fridge.RemoveProductRequest, fridge.Fridge.RemoveProductResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("fridge.FridgeService", "RemoveProduct"))
            .setRequestMarshaller(new ProtoMarshaller<fridge.Fridge.RemoveProductRequest>(RemoveProductRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<fridge.Fridge.RemoveProductResponse>(RemoveProductResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<fridge.Fridge.Empty, fridge.Fridge.ProductList> listProductsDescriptor =
          MethodDescriptor.<fridge.Fridge.Empty, fridge.Fridge.ProductList>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("fridge.FridgeService", "ListProducts"))
            .setRequestMarshaller(new ProtoMarshaller<fridge.Fridge.Empty>(EmptySerializer))
            .setResponseMarshaller(new ProtoMarshaller<fridge.Fridge.ProductList>(ProductListSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<fridge.Fridge.Empty, fridge.Fridge.OrderHistoryList> getOrderHistoryDescriptor =
          MethodDescriptor.<fridge.Fridge.Empty, fridge.Fridge.OrderHistoryList>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("fridge.FridgeService", "GetOrderHistory"))
            .setRequestMarshaller(new ProtoMarshaller<fridge.Fridge.Empty>(EmptySerializer))
            .setResponseMarshaller(new ProtoMarshaller<fridge.Fridge.OrderHistoryList>(OrderHistoryListSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        if (isChannelOwned) {
          return channel.closeCS();
        } else {
          throw new GrpcClientCloseException();
        }
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return channel.closedCS();
      }

      /**
       * The same client instance decorated to add the given key and value to the metadata of any request issued.
       */
      public FridgeServiceClient addRequestHeader(String key, String value) {
        return new DefaultFridgeServiceClient(
          channel,
          isChannelOwned,
          settings,
          options,
          mat,
          ec,
          defaultMetadata.addEntry(key, value));
      }
  }

   /**
    * The same client instance decorated to add the given key and value to the metadata of any request issued.
    */
   public FridgeServiceClient addRequestHeader(String key, String value) {
     // default implementation ignoring header for source compatibility
     return this;
   }

}



